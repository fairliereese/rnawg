rule download_fasta_human:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['fasta'].format(specie='human')
    shell:
        "wget -O - https://www.encodeproject.org/files/GRCh38_no_alt_analysis_set_GCA_000001405.15/@@download/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz | gunzip -c > {output}"


rule download_gtf_human:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['gtf_raw'].format(specie='human')
    shell:
        "wget -O - https://www.encodeproject.org/files/ENCFF991WIA/@@download/ENCFF991WIA.gtf.gz | gunzip -c > {output}"


rule download_chrom_sizes_human:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['chrom_sizes'].format(specie='human')
    shell:
        "wget https://www.encodeproject.org/files/ENCFF667IGK/@@download/ENCFF667IGK.tsv -O {output}"


# move to mouse repo
# rule download_fasta_mouse:
#     output:
#         config['wg_encode']['fasta'].format(specie='mouse')
#     shell:
#         "wget -O - https://www.encodeproject.org/files/mm10_no_alt_analysis_set_ENCODE/@@download/mm10_no_alt_analysis_set_ENCODE.fasta.gz | gunzip -c >  {output}"


# rule download_gtf_mouse:
#     output:
#         config['wg_encode']['gtf_raw'].format(specie='mouse')
#     shell:
#         "wget -O - https://www.encodeproject.org/files/gencode.vM21.primary_assembly.annotation_UCSC_names/@@download/gencode.vM21.primary_assembly.annotation_UCSC_names.gtf.gz | gunzip -c > {output}"


# rule download_chrom_sizes_mouse:
#     output:
#         config['wg_encode']['chrom_sizes'].format(specie='mouse')
#     shell:
#         "wget https://www.encodeproject.org/files/mm10_no_alt.chrom.sizes/@@download/mm10_no_alt.chrom.sizes.tsv -O {output}"


# rule download_wg_read_annot:
#     params:
#         drive_id = (lambda wildcards:
#                     config['drive_id'][wildcards.specie]['read_annot'])
#     output:
#         config['talon']['read_annot']
#     shell:
#         "gdown --id {params.drive_id} -O {output}"


# rule download_wg_gtf:
#     params:
#         drive_id = (lambda wildcards:
#                     config['drive_id'][wildcards.specie]['gtf'])
#     output:
#         config['talon']['gtf']
#     shell:
#         "gdown --id {params.drive_id} -O {output}"

# rule download_wg_abundance:
#     params:
#         drive_id = (lambda wildcards:
#                     config['drive_id'][wildcards.specie]['abundance'])
#     output:
#         config['talon']['abundance']
#     shell:
#         "gdown --id {params.drive_id} -O {output}"


rule download_cage:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['cage']['bed']
    shell:
        "wget -O - https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bed.gz | gunzip -c > {output}"


rule download_rampage:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['rampage']['bed']
    shell:
        "wget -O - https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bed.gz | gunzip -c > {output}"


rule download_cCREs_promotors:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['cCREs']['promotors']
    shell:
        "wget https://api.wenglab.org/screen_v13/fdownloads/cCREs/GRCh38-PLS.bed -O {output}"


rule download_cCREs_proximal_enhancers:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['cCREs']['proximal_enhancers']
    shell:
        "wget https://api.wenglab.org/screen_v13/fdownloads/GRCh38-ccREs.pELS.bed -O {output}"


rule download_cCREs_distal_enhancers:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['cCREs']['distal_enhancers']
    shell:
        "wget https://api.wenglab.org/screen_v13/fdownloads/GRCh38-ccREs.dELS.bed -O {output}"


rule download_lr_bam:
    threads: 1
    resources:
        mem_gb = 4
    output:
        bam = config['lr']['bam']
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bam -O {output}"


rule download_miRNA:
    threads: 1
    resources:
        mem_gb = 4
    params:
        drive_id = '13FU7nSHZWPEMuj8bKONDTLlj9-Oame6G'
    output:
        tsv = config['miRNA']['exp_mibr']
    shell:
        "gdown --id {params.drive_id} -O {output}"


rule download_bru_bam:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['miRNA']['bru_bam']
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bam -O {output}"


rule download_bru_bw:
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['miRNA']['bru_bw']
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bigWig -O {output}"


rule download_miRNA_family:
    params:
        output_dir = str(Path(config['miRNA']['families']).parent),
        url = 'http://www.targetscan.org/vert_80/vert_80_data_download/miR_Family_Info.txt.zip'
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['miRNA']['families']
    shell:
        "wget {params.url} -O {output}.zip && unzip -o {output} -d{params.output_dir}"


rule download_short_rna_bam:
    threads: 1
    resources:
        mem_gb = 4
    output:
        bam = temp(config['short_rna']['bam'])
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bam -O {output}"


rule download_mirbase_gff:
    params:
        mirbase_specie_id = config['miRNA']['mirbase_specie_id']
    output:
        config['miRNA']['mirbase_gff']
    shell:
        "wget --no-check-certificate https://www.mirbase.org/ftp/CURRENT/genomes/{params.mirbase_specie_id}.gff3 -O {output}"


rule download_bru_counts:
    threads: 1
    resources:
        mem_gb = 4
    params:
        drive_id = '1i3WtbuN-HHiz8Ute4ygoGxszx3mdjDtL'
    output:
        config['miRNA']['bru_counts']
    shell:
        "gdown --id {params.drive_id} -O {output}"


def gnomad_url_vcf(wildcards):
    return expand(
        config['gnomad']['vcf_url'],
        chrom=wildcards['chrom']
    )


def gnomad_url_tbi(wildcards):
    return expand(
        config['gnomad']['tbi_url'],
        chrom=wildcards['chrom']
    )


rule gnomad_download_vcf:
    params:
        url_vcf = gnomad_url_vcf,
        url_tbi = gnomad_url_tbi
    threads: 1
    resources:
        mem_gb = 4
    output:
        vcf = config['gnomad']['vcf'],
        tbi = config['gnomad']['vcf_tbi']
    run:
        shell("wget {params.url_vcf} -O {output.vcf}")
        shell("wget {params.url_tbi} -O {output.tbi}")


rule gnomad_download_contraints:
    params:
        url = '"https://storage.googleapis.com/gcp-public-data--gnomad/release/2.1.1/constraint/gnomad.v2.1.1.lof_metrics.by_gene.txt.bgz"'
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['gnomad']['constraint']
    shell:
        "wget -O - {params.url} | gunzip -c > {output}"


rule all_download:
    input:
        expand(config['cage']['bed'], encode_id=df_cage.index),
        expand(config['rampage']['bed'], encode_id=df_rampage.index),
        expand(config['lr']['bam'], encode_id=df_lr.index),

        expand(config['miRNA']['exp_mibr']),

        expand(config['miRNA']['bru_bw'], encode_id=df_bru_bw.index),
        expand(config['miRNA']['bru_bam'], encode_id=df_bru_bam.index),

        expand(rules.gnomad_download_vcf.output,
               chrom=config['chroms']),
        config['gnomad']['constraint']
