rule download_miRNA_targetscan:
    params:
        output_dir = str(Path(config['miRNA']['targetscan_hg19']).parent),
        url = 'https://www.targetscan.org/vert_80/vert_80_data_download/Predicted_Target_Locations.default_predictions.hg19.bed.zip'
    threads: 1
    resources:
        mem_gb = 4
    output:
        config['miRNA']['targetscan_hg19']
    shell:
        "wget {params.url} -O {output}.zip && unzip -o {output} -d{params.output_dir}"


rule miRNA_bed_all_targets:
    input:
        tsv = config['miRNA']['exp_mibr']
    threads: 1
    resources:
        mem_gb = 4
    output:
        all_bed = config['miRNA']['all_bed'],
        family_bed = config['miRNA']['family_bed']
    script:
        "./exp_mibr_to_bed.py"


rule liftover_targetscan:
    input:
        bed = config['miRNA']['targetscan_hg19']
    threads: 1
    resources:
        mem_gb = 4
    log: 'logs/miRNA/liftover.log'
    output:
        bed = config['miRNA']['targetscan']
    script:
        "./liftover_targetscan.py"


rule miRNA_count_biosample:
    input:
        counts = config['miRNA']['counts'],
    threads: 1
    resources:
        mem_gb = 4
    params:
        df_mirna = df_mirna
    output:
        counts = config['miRNA']['counts_biosample'],
    script:
        "./count_biosample.py"


rule gencode_miRNA_mapping:
    input:
        families = config['miRNA']['families'],
        mirbase = config['miRNA']['mirbase_gff'],
        gencode_gtf = config['gtf']
    params:
        ncbi_tax_id = config['miRNA']['ncbi_tax_id']
    output:
        families = config['miRNA']['miRNA_gencode']
    script:
        "./gencode_miRNA_mapping.py"


rule miRNA_filter_expression:
    input:
        counts = config['miRNA']['counts_biosample'],
        targetscan = config['miRNA']['targetscan'],
        exp_bed = config['miRNA']['all_bed'],
        families = config['miRNA']['miRNA_gencode']
    threads: 1
    resources:
        mem_gb = 4
    params:
        df_miran = df_mirna,
        tpm_cutoff = 2
    output:
        all_targets = config['miRNA']['all_targets'],
        targets = expand(config['miRNA']['targets'],
                         biosample=df_mirna['Biosample.term.name'].unique())
    script:
        "./biosample_targets.py"


rule miRNA_3utr_bru_counting:
    input:
        utr = config['polya']['three_prime_utr'],
        bam = config['miRNA']['bru_bam']
    threads: 1
    resources:
        mem_gb = 64
    output:
        counts = config['miRNA']['bru_counts']
    script:
        "./count_bru_reads.py"


rule miRNA_plot:
    input:
        targets = expand(config['miRNA']['targets'],
                         biosample=df_mirna['Biosample.term.name'].unique()),
        counts = expand(rules.miRNA_3utr_bru_counting.output,
                        encode_id=df_bru_bam.index),
        gtf = config['talon']['gtf'],
        abundance = config['talon']['abundance']
    params:
        df_bru_bam = df_bru_bam,
        df_lr = df_lr,
        df_mirna = df_mirna
    threads: 1
    resources:
        mem_gb = 16
    output:
        num_targets = 'reports/figures/miRNA/mirna_num_targets_per_sample.png',
        deplition = 'reports/figures/miRNA/mirna_depletion_rate.png'
    notebook:
        "./num_targets_per_sample.ipynb"


rule all_miRNA:
    input:
        rules.miRNA_plot.output
